### Atomic Auctions

type AtomicAuctionLot @entity {
  id: String! # chain-auctionHouse-lotId
  chain: String!
  auctionHouse: Bytes! # address
  lotId: BigInt!

  createdBlockNumber: BigInt!
  createdBlockTimestamp: BigInt!
  createdDate: String!
  createdTransactionHash: Bytes!

  # Lot details
  capacityInQuote: Boolean!
  capacityInitial: BigDecimal! # uint256
  start: BigInt! # timestamp
  conclusion: BigInt! # timestamp

  # Routing details
  auctionType: String! # bytes7
  baseToken: Token! # address
  quoteToken: Token! # address
  seller: Bytes! # address
  derivativeType: String # bytes7
  wrapDerivative: Boolean!

  # Fee details
  curator: Bytes # address
  curatorApproved: Boolean!
  curatorFee: BigDecimal! # uint256
  protocolFee: BigDecimal! # uint256
  referrerFee: BigDecimal! # uint256

  # These values are updated when events occur
  capacity: BigDecimal! # uint256
  sold: BigDecimal! # uint256
  purchased: BigDecimal! # uint256
  lastUpdatedBlockNumber: BigInt!
  lastUpdatedBlockTimestamp: BigInt!
  lastUpdatedDate: String!
  lastUpdatedTransactionHash: Bytes!

  # Reverse lookups
  cancelled: AtomicAuctionCancelled @derivedFrom(field: "lot")
  created: AtomicAuctionCreated! @derivedFrom(field: "lot")
  curated: AtomicAuctionCurated @derivedFrom(field: "lot")
  purchases: [AtomicPurchase!]! @derivedFrom(field: "lot")
  fixedPriceSale: AtomicFixedPriceSaleLot @derivedFrom(field: "lot")
  linearVesting: AtomicLinearVestingLot @derivedFrom(field: "lot")
}

type AtomicAuctionCreated @entity(immutable: true) {
  id: Bytes!
  lot: AtomicAuctionLot!
  infoHash: String! # IPFS info hash

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

type AtomicAuctionCancelled @entity(immutable: true) {
  id: Bytes!
  lot: AtomicAuctionLot!
  auctionRef: Bytes! # bytes7

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

type AtomicAuctionCurated @entity(immutable: true) {
  id: Bytes!
  lot: AtomicAuctionLot!
  curator: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

type AtomicPurchase @entity(immutable: true) {
  id: Bytes!
  lot: AtomicAuctionLot!
  buyer: Bytes! # address
  referrer: Bytes! # address
  amount: BigDecimal! # uint256
  payout: BigDecimal! # uint256

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

### Atomic Modules

type AtomicFixedPriceSaleLot @entity(immutable: true) {
  id: Bytes!
  lot: AtomicAuctionLot!

  price: BigDecimal! # uint256
  maxPayout: BigDecimal! # uint256
}

type AtomicLinearVestingLot @entity(immutable: true) {
  id: Bytes!
  lot: AtomicAuctionLot!

  startTimestamp: BigInt!
  startDate: String!
  expiryTimestamp: BigInt!
  expiryDate: String!

  # TODO consider timeseries data for redemption/vesting
}

### Batch Auctions

type BatchAuctionLot @entity {
  id: String! # chain-auctionHouse-lotId
  chain: String!
  auctionHouse: Bytes! # address
  lotId: BigInt!

  createdBlockNumber: BigInt!
  createdBlockTimestamp: BigInt!
  createdDate: String!
  createdTransactionHash: Bytes!

  # Lot details
  capacityInitial: BigDecimal! # uint256
  start: BigInt! # timestamp
  conclusion: BigInt! # timestamp

  # Routing details
  auctionType: String! # bytes7
  baseToken: Token! # address
  quoteToken: Token! # address
  seller: Bytes! # address
  derivativeType: String # bytes7
  wrapDerivative: Boolean!

  # Fee details
  curator: Bytes # address
  curatorApproved: Boolean!
  curatorFee: BigDecimal! # uint256
  protocolFee: BigDecimal! # uint256
  referrerFee: BigDecimal! # uint256

  # These values are updated when events occur
  capacity: BigDecimal! # uint256
  sold: BigDecimal! # uint256
  purchased: BigDecimal! # uint256
  lastUpdatedBlockNumber: BigInt!
  lastUpdatedBlockTimestamp: BigInt!
  lastUpdatedDate: String!
  lastUpdatedTransactionHash: Bytes!

  # Bids
  maxBidId: BigInt! # uint96

  # Reverse lookups
  cancelled: BatchAuctionCancelled @derivedFrom(field: "lot")
  created: BatchAuctionCreated! @derivedFrom(field: "lot")
  curated: BatchAuctionCurated @derivedFrom(field: "lot")
  settled: BatchAuctionSettled @derivedFrom(field: "lot")
  aborted: BatchAuctionAborted @derivedFrom(field: "lot")
  bids: [BatchBid!]! @derivedFrom(field: "lot")
  bidsDecrypted: [BatchBidDecrypted!]! @derivedFrom(field: "lot")
  bidsClaimed: [BatchBidClaimed!]! @derivedFrom(field: "lot")
  bidsRefunded: [BatchBidRefunded!]! @derivedFrom(field: "lot")
  encryptedMarginalPrice: BatchEncryptedMarginalPriceLot @derivedFrom(field: "lot")
  linearVesting: BatchLinearVestingLot @derivedFrom(field: "lot")
}

type BatchAuctionCreated @entity(immutable: true) {
  id: String! # chain-auctionHouse-lotId
  lot: BatchAuctionLot!
  infoHash: String! # IPFS info hash

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

type BatchAuctionCancelled @entity(immutable: true) {
  id: String! # chain-auctionHouse-lotId
  lot: BatchAuctionLot!
  auctionRef: Bytes! # bytes7

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

type BatchAuctionCurated @entity(immutable: true) {
  id: String! # chain-auctionHouse-lotId
  lot: BatchAuctionLot!
  curator: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

type BatchAuctionSettled @entity(immutable: true) {
  id: Bytes!
  lot: BatchAuctionLot!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

type BatchAuctionAborted @entity(immutable: true) {
  id: Bytes!
  lot: BatchAuctionLot!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

type BatchBid @entity {
  id: String! # lot id + bidId
  lot: BatchAuctionLot!

  bidId: BigInt! # uint96
  bidder: Bytes! # address

  amountIn: BigDecimal! # uint256
  amountOut: BigDecimal # uint256
  rawAmountIn: BigInt!
  rawAmountOut: BigInt

  # Equal to the amount of quote tokens that were settled. Equal to `amountIn - settledAmountInRefunded`
  settledAmountIn: BigDecimal # uint256
  # Equal to the amount of quote tokens that were refunded, in the case of a partial fill
  settledAmountInRefunded: BigDecimal # uint256
  settledAmountOut: BigDecimal # uint256
  submittedPrice: BigDecimal

  rawMarginalPrice: BigInt
  rawSubmittedPrice: BigInt
  remainingCapacity: BigDecimal

  status: String! # enum: "submitted" | "decrypted" | "won" | "won - partial fill" | "refunded" | "claimed"

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!

  # Reverse lookups
  decrypted: BatchBidDecrypted @derivedFrom(field: "bid")
  refunded: BatchBidRefunded @derivedFrom(field: "bid")
  claimed: BatchBidClaimed @derivedFrom(field: "bid")
}

type BatchBidRefunded @entity(immutable: true) {
  id: Bytes!
  lot: BatchAuctionLot!
  bid: BatchBid!

  bidder: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

type BatchBidDecrypted @entity(immutable: true) {
  id: Bytes!
  lot: BatchAuctionLot!
  bid: BatchBid!

  amountIn: BigDecimal!
  amountOut: BigDecimal!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

type BatchBidClaimed @entity(immutable: true) {
  id: Bytes!
  lot: BatchAuctionLot!
  bid: BatchBid!

  bidder: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

### Batch Modules

type BatchEncryptedMarginalPriceLot @entity {
  id: String! # chain-auctionHouse-lotId
  lot: BatchAuctionLot!

  status: String! # enum: "Created" | "Decrypted" | "Settled"
  minPrice: BigDecimal! # uint256
  minFilled: BigDecimal! # uint256
  minBidSize: BigDecimal! # uint256

  # Only set on settlement
  marginalPrice: BigDecimal # uint256
  hasPartialFill: Boolean # Only set after settlement
  partialBidId: BigInt # uint96 # Only set after settlement
}

type BatchLinearVestingLot @entity(immutable: true) {
  id: Bytes!
  lot: BatchAuctionLot!

  startTimestamp: BigInt!
  startDate: String!
  expiryTimestamp: BigInt!
  expiryDate: String!

  # TODO consider timeseries data for redemption/vesting
}

### Shared types

type Token @entity(immutable: true) {
  id: Bytes!
  address: Bytes!
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigInt!
}

type AuctionHouseOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  auctionHouse: Bytes! # address
  caller: Bytes! # address
  newOwner: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

type AuctionHouseModuleInstalled @entity(immutable: true) {
  id: Bytes!
  auctionHouse: Bytes! # address
  keycode: Bytes! # bytes5
  version: Int! # uint8
  address: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}

type AuctionHouseModuleSunset @entity(immutable: true) {
  id: Bytes!
  auctionHouse: Bytes! # address
  keycode: Bytes! # bytes5

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  date: String!
  transactionHash: Bytes!
}
