// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BatchAuctionModule__claimBidsResultBidClaimsStruct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get referrer(): Address {
    return this[1].toAddress();
  }

  get paid(): BigInt {
    return this[2].toBigInt();
  }

  get payout(): BigInt {
    return this[3].toBigInt();
  }

  get refund(): BigInt {
    return this[4].toBigInt();
  }
}

export class BatchAuctionModule__claimBidsResult {
  value0: Array<BatchAuctionModule__claimBidsResultBidClaimsStruct>;
  value1: Bytes;

  constructor(
    value0: Array<BatchAuctionModule__claimBidsResultBidClaimsStruct>,
    value1: Bytes,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getBidClaims(): Array<BatchAuctionModule__claimBidsResultBidClaimsStruct> {
    return this.value0;
  }

  getAuctionOutput(): Bytes {
    return this.value1;
  }
}

export class BatchAuctionModule__getBidClaimResultValue0Struct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get referrer(): Address {
    return this[1].toAddress();
  }

  get paid(): BigInt {
    return this[2].toBigInt();
  }

  get payout(): BigInt {
    return this[3].toBigInt();
  }

  get refund(): BigInt {
    return this[4].toBigInt();
  }
}

export class BatchAuctionModule__getLotResultValue0Struct extends ethereum.Tuple {
  get start(): BigInt {
    return this[0].toBigInt();
  }

  get conclusion(): BigInt {
    return this[1].toBigInt();
  }

  get quoteTokenDecimals(): i32 {
    return this[2].toI32();
  }

  get baseTokenDecimals(): i32 {
    return this[3].toI32();
  }

  get capacityInQuote(): boolean {
    return this[4].toBoolean();
  }

  get capacity(): BigInt {
    return this[5].toBigInt();
  }

  get sold(): BigInt {
    return this[6].toBigInt();
  }

  get purchased(): BigInt {
    return this[7].toBigInt();
  }
}

export class BatchAuctionModule__lotDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: i32;
  value4: boolean;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: i32,
    value3: i32,
    value4: boolean,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3)),
    );
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getStart(): BigInt {
    return this.value0;
  }

  getConclusion(): BigInt {
    return this.value1;
  }

  getQuoteTokenDecimals(): i32 {
    return this.value2;
  }

  getBaseTokenDecimals(): i32 {
    return this.value3;
  }

  getCapacityInQuote(): boolean {
    return this.value4;
  }

  getCapacity(): BigInt {
    return this.value5;
  }

  getSold(): BigInt {
    return this.value6;
  }

  getPurchased(): BigInt {
    return this.value7;
  }
}

export class BatchAuctionModule__settleResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;
  value4: Bytes;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
    value4: Bytes,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    return map;
  }

  getTotalIn(): BigInt {
    return this.value0;
  }

  getTotalOut(): BigInt {
    return this.value1;
  }

  getCapacity(): BigInt {
    return this.value2;
  }

  getFinished(): boolean {
    return this.value3;
  }

  getAuctionOutput(): Bytes {
    return this.value4;
  }
}

export class BatchAuctionModule extends ethereum.SmartContract {
  static bind(address: Address): BatchAuctionModule {
    return new BatchAuctionModule("BatchAuctionModule", address);
  }

  PARENT(): Address {
    let result = super.call("PARENT", "PARENT():(address)", []);

    return result[0].toAddress();
  }

  try_PARENT(): ethereum.CallResult<Address> {
    let result = super.tryCall("PARENT", "PARENT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TYPE(): i32 {
    let result = super.call("TYPE", "TYPE():(uint8)", []);

    return result[0].toI32();
  }

  try_TYPE(): ethereum.CallResult<i32> {
    let result = super.tryCall("TYPE", "TYPE():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  VEECODE(): Bytes {
    let result = super.call("VEECODE", "VEECODE():(bytes7)", []);

    return result[0].toBytes();
  }

  try_VEECODE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("VEECODE", "VEECODE():(bytes7)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  auctionType(): i32 {
    let result = super.call("auctionType", "auctionType():(uint8)", []);

    return result[0].toI32();
  }

  try_auctionType(): ethereum.CallResult<i32> {
    let result = super.tryCall("auctionType", "auctionType():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  bid(
    lotId_: BigInt,
    bidder_: Address,
    referrer_: Address,
    amount_: BigInt,
    auctionData_: Bytes,
  ): BigInt {
    let result = super.call(
      "bid",
      "bid(uint96,address,address,uint256,bytes):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromAddress(bidder_),
        ethereum.Value.fromAddress(referrer_),
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromBytes(auctionData_),
      ],
    );

    return result[0].toBigInt();
  }

  try_bid(
    lotId_: BigInt,
    bidder_: Address,
    referrer_: Address,
    amount_: BigInt,
    auctionData_: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bid",
      "bid(uint96,address,address,uint256,bytes):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromAddress(bidder_),
        ethereum.Value.fromAddress(referrer_),
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromBytes(auctionData_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  capacityInQuote(lotId_: BigInt): boolean {
    let result = super.call(
      "capacityInQuote",
      "capacityInQuote(uint96):(bool)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return result[0].toBoolean();
  }

  try_capacityInQuote(lotId_: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "capacityInQuote",
      "capacityInQuote(uint96):(bool)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claimBids(
    lotId_: BigInt,
    bidIds_: Array<BigInt>,
  ): BatchAuctionModule__claimBidsResult {
    let result = super.call(
      "claimBids",
      "claimBids(uint96,uint64[]):((address,address,uint256,uint256,uint256)[],bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigIntArray(bidIds_),
      ],
    );

    return new BatchAuctionModule__claimBidsResult(
      result[0].toTupleArray<BatchAuctionModule__claimBidsResultBidClaimsStruct>(),
      result[1].toBytes(),
    );
  }

  try_claimBids(
    lotId_: BigInt,
    bidIds_: Array<BigInt>,
  ): ethereum.CallResult<BatchAuctionModule__claimBidsResult> {
    let result = super.tryCall(
      "claimBids",
      "claimBids(uint96,uint64[]):((address,address,uint256,uint256,uint256)[],bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigIntArray(bidIds_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BatchAuctionModule__claimBidsResult(
        value[0].toTupleArray<BatchAuctionModule__claimBidsResultBidClaimsStruct>(),
        value[1].toBytes(),
      ),
    );
  }

  dedicatedSettlePeriod(): BigInt {
    let result = super.call(
      "dedicatedSettlePeriod",
      "dedicatedSettlePeriod():(uint48)",
      [],
    );

    return result[0].toBigInt();
  }

  try_dedicatedSettlePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dedicatedSettlePeriod",
      "dedicatedSettlePeriod():(uint48)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBidClaim(
    lotId_: BigInt,
    bidId_: BigInt,
  ): BatchAuctionModule__getBidClaimResultValue0Struct {
    let result = super.call(
      "getBidClaim",
      "getBidClaim(uint96,uint64):((address,address,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(bidId_),
      ],
    );

    return changetype<BatchAuctionModule__getBidClaimResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getBidClaim(
    lotId_: BigInt,
    bidId_: BigInt,
  ): ethereum.CallResult<BatchAuctionModule__getBidClaimResultValue0Struct> {
    let result = super.tryCall(
      "getBidClaim",
      "getBidClaim(uint96,uint64):((address,address,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(bidId_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<BatchAuctionModule__getBidClaimResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getBidIds(lotId_: BigInt, start_: BigInt, count_: BigInt): Array<BigInt> {
    let result = super.call(
      "getBidIds",
      "getBidIds(uint96,uint256,uint256):(uint64[])",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(start_),
        ethereum.Value.fromUnsignedBigInt(count_),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_getBidIds(
    lotId_: BigInt,
    start_: BigInt,
    count_: BigInt,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBidIds",
      "getBidIds(uint96,uint256,uint256):(uint64[])",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(start_),
        ethereum.Value.fromUnsignedBigInt(count_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getLot(lotId_: BigInt): BatchAuctionModule__getLotResultValue0Struct {
    let result = super.call(
      "getLot",
      "getLot(uint96):((uint48,uint48,uint8,uint8,bool,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return changetype<BatchAuctionModule__getLotResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getLot(
    lotId_: BigInt,
  ): ethereum.CallResult<BatchAuctionModule__getLotResultValue0Struct> {
    let result = super.tryCall(
      "getLot",
      "getLot(uint96):((uint48,uint48,uint8,uint8,bool,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<BatchAuctionModule__getLotResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getNumBids(lotId_: BigInt): BigInt {
    let result = super.call("getNumBids", "getNumBids(uint96):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);

    return result[0].toBigInt();
  }

  try_getNumBids(lotId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNumBids", "getNumBids(uint96):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasEnded(lotId_: BigInt): boolean {
    let result = super.call("hasEnded", "hasEnded(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);

    return result[0].toBoolean();
  }

  try_hasEnded(lotId_: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasEnded", "hasEnded(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLive(lotId_: BigInt): boolean {
    let result = super.call("isLive", "isLive(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);

    return result[0].toBoolean();
  }

  try_isLive(lotId_: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLive", "isLive(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lotAuctionOutput(param0: BigInt): Bytes {
    let result = super.call(
      "lotAuctionOutput",
      "lotAuctionOutput(uint96):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBytes();
  }

  try_lotAuctionOutput(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "lotAuctionOutput",
      "lotAuctionOutput(uint96):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  lotData(id: BigInt): BatchAuctionModule__lotDataResult {
    let result = super.call(
      "lotData",
      "lotData(uint96):(uint48,uint48,uint8,uint8,bool,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return new BatchAuctionModule__lotDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
    );
  }

  try_lotData(
    id: BigInt,
  ): ethereum.CallResult<BatchAuctionModule__lotDataResult> {
    let result = super.tryCall(
      "lotData",
      "lotData(uint96):(uint48,uint48,uint8,uint8,bool,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BatchAuctionModule__lotDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
      ),
    );
  }

  minAuctionDuration(): BigInt {
    let result = super.call(
      "minAuctionDuration",
      "minAuctionDuration():(uint48)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minAuctionDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minAuctionDuration",
      "minAuctionDuration():(uint48)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refundBid(
    lotId_: BigInt,
    bidId_: BigInt,
    index_: BigInt,
    caller_: Address,
  ): BigInt {
    let result = super.call(
      "refundBid",
      "refundBid(uint96,uint64,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(bidId_),
        ethereum.Value.fromUnsignedBigInt(index_),
        ethereum.Value.fromAddress(caller_),
      ],
    );

    return result[0].toBigInt();
  }

  try_refundBid(
    lotId_: BigInt,
    bidId_: BigInt,
    index_: BigInt,
    caller_: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "refundBid",
      "refundBid(uint96,uint64,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(bidId_),
        ethereum.Value.fromUnsignedBigInt(index_),
        ethereum.Value.fromAddress(caller_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  remainingCapacity(lotId_: BigInt): BigInt {
    let result = super.call(
      "remainingCapacity",
      "remainingCapacity(uint96):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return result[0].toBigInt();
  }

  try_remainingCapacity(lotId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingCapacity",
      "remainingCapacity(uint96):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settle(lotId_: BigInt, num_: BigInt): BatchAuctionModule__settleResult {
    let result = super.call(
      "settle",
      "settle(uint96,uint256):(uint256,uint256,uint256,bool,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(num_),
      ],
    );

    return new BatchAuctionModule__settleResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toBytes(),
    );
  }

  try_settle(
    lotId_: BigInt,
    num_: BigInt,
  ): ethereum.CallResult<BatchAuctionModule__settleResult> {
    let result = super.tryCall(
      "settle",
      "settle(uint96,uint256):(uint256,uint256,uint256,bool,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(num_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BatchAuctionModule__settleResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toBytes(),
      ),
    );
  }
}

export class INITCall extends ethereum.Call {
  get inputs(): INITCall__Inputs {
    return new INITCall__Inputs(this);
  }

  get outputs(): INITCall__Outputs {
    return new INITCall__Outputs(this);
  }
}

export class INITCall__Inputs {
  _call: INITCall;

  constructor(call: INITCall) {
    this._call = call;
  }
}

export class INITCall__Outputs {
  _call: INITCall;

  constructor(call: INITCall) {
    this._call = call;
  }
}

export class AbortCall extends ethereum.Call {
  get inputs(): AbortCall__Inputs {
    return new AbortCall__Inputs(this);
  }

  get outputs(): AbortCall__Outputs {
    return new AbortCall__Outputs(this);
  }
}

export class AbortCall__Inputs {
  _call: AbortCall;

  constructor(call: AbortCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AbortCall__Outputs {
  _call: AbortCall;

  constructor(call: AbortCall) {
    this._call = call;
  }
}

export class AuctionCall extends ethereum.Call {
  get inputs(): AuctionCall__Inputs {
    return new AuctionCall__Inputs(this);
  }

  get outputs(): AuctionCall__Outputs {
    return new AuctionCall__Outputs(this);
  }
}

export class AuctionCall__Inputs {
  _call: AuctionCall;

  constructor(call: AuctionCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get params_(): AuctionCallParams_Struct {
    return changetype<AuctionCallParams_Struct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get quoteTokenDecimals_(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get baseTokenDecimals_(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class AuctionCall__Outputs {
  _call: AuctionCall;

  constructor(call: AuctionCall) {
    this._call = call;
  }
}

export class AuctionCallParams_Struct extends ethereum.Tuple {
  get start(): BigInt {
    return this[0].toBigInt();
  }

  get duration(): BigInt {
    return this[1].toBigInt();
  }

  get capacityInQuote(): boolean {
    return this[2].toBoolean();
  }

  get capacity(): BigInt {
    return this[3].toBigInt();
  }

  get implParams(): Bytes {
    return this[4].toBytes();
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidder_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get referrer_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get auctionData_(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get bidId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CancelAuctionCall extends ethereum.Call {
  get inputs(): CancelAuctionCall__Inputs {
    return new CancelAuctionCall__Inputs(this);
  }

  get outputs(): CancelAuctionCall__Outputs {
    return new CancelAuctionCall__Outputs(this);
  }
}

export class CancelAuctionCall__Inputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelAuctionCall__Outputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }
}

export class ClaimBidsCall extends ethereum.Call {
  get inputs(): ClaimBidsCall__Inputs {
    return new ClaimBidsCall__Inputs(this);
  }

  get outputs(): ClaimBidsCall__Outputs {
    return new ClaimBidsCall__Outputs(this);
  }
}

export class ClaimBidsCall__Inputs {
  _call: ClaimBidsCall;

  constructor(call: ClaimBidsCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidIds_(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ClaimBidsCall__Outputs {
  _call: ClaimBidsCall;

  constructor(call: ClaimBidsCall) {
    this._call = call;
  }

  get bidClaims(): Array<ClaimBidsCallBidClaimsStruct> {
    return this._call.outputValues[0].value.toTupleArray<ClaimBidsCallBidClaimsStruct>();
  }

  get auctionOutput(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class ClaimBidsCallBidClaimsStruct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get referrer(): Address {
    return this[1].toAddress();
  }

  get paid(): BigInt {
    return this[2].toBigInt();
  }

  get payout(): BigInt {
    return this[3].toBigInt();
  }

  get refund(): BigInt {
    return this[4].toBigInt();
  }
}

export class RefundBidCall extends ethereum.Call {
  get inputs(): RefundBidCall__Inputs {
    return new RefundBidCall__Inputs(this);
  }

  get outputs(): RefundBidCall__Outputs {
    return new RefundBidCall__Outputs(this);
  }
}

export class RefundBidCall__Inputs {
  _call: RefundBidCall;

  constructor(call: RefundBidCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get index_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get caller_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class RefundBidCall__Outputs {
  _call: RefundBidCall;

  constructor(call: RefundBidCall) {
    this._call = call;
  }

  get refund(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetDedicatedSettlePeriodCall extends ethereum.Call {
  get inputs(): SetDedicatedSettlePeriodCall__Inputs {
    return new SetDedicatedSettlePeriodCall__Inputs(this);
  }

  get outputs(): SetDedicatedSettlePeriodCall__Outputs {
    return new SetDedicatedSettlePeriodCall__Outputs(this);
  }
}

export class SetDedicatedSettlePeriodCall__Inputs {
  _call: SetDedicatedSettlePeriodCall;

  constructor(call: SetDedicatedSettlePeriodCall) {
    this._call = call;
  }

  get period_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDedicatedSettlePeriodCall__Outputs {
  _call: SetDedicatedSettlePeriodCall;

  constructor(call: SetDedicatedSettlePeriodCall) {
    this._call = call;
  }
}

export class SetMinAuctionDurationCall extends ethereum.Call {
  get inputs(): SetMinAuctionDurationCall__Inputs {
    return new SetMinAuctionDurationCall__Inputs(this);
  }

  get outputs(): SetMinAuctionDurationCall__Outputs {
    return new SetMinAuctionDurationCall__Outputs(this);
  }
}

export class SetMinAuctionDurationCall__Inputs {
  _call: SetMinAuctionDurationCall;

  constructor(call: SetMinAuctionDurationCall) {
    this._call = call;
  }

  get duration_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinAuctionDurationCall__Outputs {
  _call: SetMinAuctionDurationCall;

  constructor(call: SetMinAuctionDurationCall) {
    this._call = call;
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get num_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get totalIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get totalOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get capacity(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get finished(): boolean {
    return this._call.outputValues[3].value.toBoolean();
  }

  get auctionOutput(): Bytes {
    return this._call.outputValues[4].value.toBytes();
  }
}
