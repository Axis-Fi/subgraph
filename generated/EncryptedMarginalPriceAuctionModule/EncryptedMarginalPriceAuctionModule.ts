// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap,
} from "@graphprotocol/graph-ts";

export class BidDecrypted extends ethereum.Event {
  get params(): BidDecrypted__Params {
    return new BidDecrypted__Params(this);
  }
}

export class BidDecrypted__Params {
  _event: BidDecrypted;

  constructor(event: BidDecrypted) {
    this._event = event;
  }

  get lotId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class EncryptedMarginalPriceAuctionModule__auctionInputParams_Struct extends ethereum.Tuple {
  get start(): BigInt {
    return this[0].toBigInt();
  }

  get duration(): BigInt {
    return this[1].toBigInt();
  }

  get capacityInQuote(): boolean {
    return this[2].toBoolean();
  }

  get capacity(): BigInt {
    return this[3].toBigInt();
  }

  get implParams(): Bytes {
    return this[4].toBytes();
  }
}

export class EncryptedMarginalPriceAuctionModule__auctionDataResultPublicKeyStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class EncryptedMarginalPriceAuctionModule__auctionDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: i32;
  value7: BigInt;
  value8: EncryptedMarginalPriceAuctionModule__auctionDataResultPublicKeyStruct;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: i32,
    value7: BigInt,
    value8: EncryptedMarginalPriceAuctionModule__auctionDataResultPublicKeyStruct,
    value9: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6)),
    );
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromTuple(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }

  getNextBidId(): BigInt {
    return this.value0;
  }

  getMarginalPrice(): BigInt {
    return this.value1;
  }

  getMinPrice(): BigInt {
    return this.value2;
  }

  getNextDecryptIndex(): BigInt {
    return this.value3;
  }

  getMinFilled(): BigInt {
    return this.value4;
  }

  getMinBidSize(): BigInt {
    return this.value5;
  }

  getStatus(): i32 {
    return this.value6;
  }

  getMarginalBidId(): BigInt {
    return this.value7;
  }

  getPublicKey(): EncryptedMarginalPriceAuctionModule__auctionDataResultPublicKeyStruct {
    return this.value8;
  }

  getPrivateKey(): BigInt {
    return this.value9;
  }
}

export class EncryptedMarginalPriceAuctionModule__bidsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: i32;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: i32,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4)),
    );
    return map;
  }

  getBidder(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getMinAmountOut(): BigInt {
    return this.value2;
  }

  getReferrer(): Address {
    return this.value3;
  }

  getStatus(): i32 {
    return this.value4;
  }
}

export class EncryptedMarginalPriceAuctionModule__claimBidsResultBidClaimsStruct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get referrer(): Address {
    return this[1].toAddress();
  }

  get paid(): BigInt {
    return this[2].toBigInt();
  }

  get payout(): BigInt {
    return this[3].toBigInt();
  }
}

export class EncryptedMarginalPriceAuctionModule__claimBidsResult {
  value0: Array<EncryptedMarginalPriceAuctionModule__claimBidsResultBidClaimsStruct>;
  value1: Bytes;

  constructor(
    value0: Array<EncryptedMarginalPriceAuctionModule__claimBidsResultBidClaimsStruct>,
    value1: Bytes,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getBidClaims(): Array<EncryptedMarginalPriceAuctionModule__claimBidsResultBidClaimsStruct> {
    return this.value0;
  }

  getAuctionOutput(): Bytes {
    return this.value1;
  }
}

export class EncryptedMarginalPriceAuctionModule__claimProceedsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getPurchased(): BigInt {
    return this.value0;
  }

  getSold(): BigInt {
    return this.value1;
  }

  getPayoutSent(): BigInt {
    return this.value2;
  }
}

export class EncryptedMarginalPriceAuctionModule__encryptedBidsResultBidPubKeyStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class EncryptedMarginalPriceAuctionModule__encryptedBidsResult {
  value0: BigInt;
  value1: EncryptedMarginalPriceAuctionModule__encryptedBidsResultBidPubKeyStruct;

  constructor(
    value0: BigInt,
    value1: EncryptedMarginalPriceAuctionModule__encryptedBidsResultBidPubKeyStruct,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getEncryptedAmountOut(): BigInt {
    return this.value0;
  }

  getBidPubKey(): EncryptedMarginalPriceAuctionModule__encryptedBidsResultBidPubKeyStruct {
    return this.value1;
  }
}

export class EncryptedMarginalPriceAuctionModule__getAuctionDataResultAuctionData_Struct extends ethereum.Tuple {
  get nextBidId(): BigInt {
    return this[0].toBigInt();
  }

  get marginalPrice(): BigInt {
    return this[1].toBigInt();
  }

  get minPrice(): BigInt {
    return this[2].toBigInt();
  }

  get nextDecryptIndex(): BigInt {
    return this[3].toBigInt();
  }

  get minFilled(): BigInt {
    return this[4].toBigInt();
  }

  get minBidSize(): BigInt {
    return this[5].toBigInt();
  }

  get status(): i32 {
    return this[6].toI32();
  }

  get marginalBidId(): BigInt {
    return this[7].toBigInt();
  }

  get publicKey(): EncryptedMarginalPriceAuctionModule__getAuctionDataResultAuctionData_PublicKeyStruct {
    return changetype<EncryptedMarginalPriceAuctionModule__getAuctionDataResultAuctionData_PublicKeyStruct>(
      this[8].toTuple(),
    );
  }

  get privateKey(): BigInt {
    return this[9].toBigInt();
  }

  get bidIds(): Array<BigInt> {
    return this[10].toBigIntArray();
  }
}

export class EncryptedMarginalPriceAuctionModule__getAuctionDataResultAuctionData_PublicKeyStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class EncryptedMarginalPriceAuctionModule__getBidResultBidStruct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get minAmountOut(): BigInt {
    return this[2].toBigInt();
  }

  get referrer(): Address {
    return this[3].toAddress();
  }

  get status(): i32 {
    return this[4].toI32();
  }
}

export class EncryptedMarginalPriceAuctionModule__getBidResultEncryptedBidStruct extends ethereum.Tuple {
  get encryptedAmountOut(): BigInt {
    return this[0].toBigInt();
  }

  get bidPubKey(): EncryptedMarginalPriceAuctionModule__getBidResultEncryptedBidBidPubKeyStruct {
    return changetype<EncryptedMarginalPriceAuctionModule__getBidResultEncryptedBidBidPubKeyStruct>(
      this[1].toTuple(),
    );
  }
}

export class EncryptedMarginalPriceAuctionModule__getBidResultEncryptedBidBidPubKeyStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class EncryptedMarginalPriceAuctionModule__getBidResult {
  value0: EncryptedMarginalPriceAuctionModule__getBidResultBidStruct;
  value1: EncryptedMarginalPriceAuctionModule__getBidResultEncryptedBidStruct;

  constructor(
    value0: EncryptedMarginalPriceAuctionModule__getBidResultBidStruct,
    value1: EncryptedMarginalPriceAuctionModule__getBidResultEncryptedBidStruct,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getBid(): EncryptedMarginalPriceAuctionModule__getBidResultBidStruct {
    return this.value0;
  }

  getEncryptedBid(): EncryptedMarginalPriceAuctionModule__getBidResultEncryptedBidStruct {
    return this.value1;
  }
}

export class EncryptedMarginalPriceAuctionModule__getLotResultValue0Struct extends ethereum.Tuple {
  get start(): BigInt {
    return this[0].toBigInt();
  }

  get conclusion(): BigInt {
    return this[1].toBigInt();
  }

  get quoteTokenDecimals(): i32 {
    return this[2].toI32();
  }

  get baseTokenDecimals(): i32 {
    return this[3].toI32();
  }

  get capacityInQuote(): boolean {
    return this[4].toBoolean();
  }

  get capacity(): BigInt {
    return this[5].toBigInt();
  }

  get sold(): BigInt {
    return this[6].toBigInt();
  }

  get purchased(): BigInt {
    return this[7].toBigInt();
  }

  get partialPayout(): BigInt {
    return this[8].toBigInt();
  }
}

export class EncryptedMarginalPriceAuctionModule__lotDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: i32;
  value4: boolean;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: i32,
    value3: i32,
    value4: boolean,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3)),
    );
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }

  getStart(): BigInt {
    return this.value0;
  }

  getConclusion(): BigInt {
    return this.value1;
  }

  getQuoteTokenDecimals(): i32 {
    return this.value2;
  }

  getBaseTokenDecimals(): i32 {
    return this.value3;
  }

  getCapacityInQuote(): boolean {
    return this.value4;
  }

  getCapacity(): BigInt {
    return this.value5;
  }

  getSold(): BigInt {
    return this.value6;
  }

  getPurchased(): BigInt {
    return this.value7;
  }

  getPartialPayout(): BigInt {
    return this.value8;
  }
}

export class EncryptedMarginalPriceAuctionModule__purchaseResult {
  value0: BigInt;
  value1: Bytes;

  constructor(value0: BigInt, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getPayout(): BigInt {
    return this.value0;
  }

  getAuctionOutput(): Bytes {
    return this.value1;
  }
}

export class EncryptedMarginalPriceAuctionModule__settleResultSettlementStruct extends ethereum.Tuple {
  get totalIn(): BigInt {
    return this[0].toBigInt();
  }

  get totalOut(): BigInt {
    return this[1].toBigInt();
  }

  get pfBidder(): Address {
    return this[2].toAddress();
  }

  get pfReferrer(): Address {
    return this[3].toAddress();
  }

  get pfRefund(): BigInt {
    return this[4].toBigInt();
  }

  get pfPayout(): BigInt {
    return this[5].toBigInt();
  }

  get auctionOutput(): Bytes {
    return this[6].toBytes();
  }
}

export class EncryptedMarginalPriceAuctionModule__settleResult {
  value0: EncryptedMarginalPriceAuctionModule__settleResultSettlementStruct;
  value1: Bytes;

  constructor(
    value0: EncryptedMarginalPriceAuctionModule__settleResultSettlementStruct,
    value1: Bytes,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getSettlement(): EncryptedMarginalPriceAuctionModule__settleResultSettlementStruct {
    return this.value0;
  }

  getAuctionOutput(): Bytes {
    return this.value1;
  }
}

export class EncryptedMarginalPriceAuctionModule extends ethereum.SmartContract {
  static bind(address: Address): EncryptedMarginalPriceAuctionModule {
    return new EncryptedMarginalPriceAuctionModule(
      "EncryptedMarginalPriceAuctionModule",
      address,
    );
  }

  PARENT(): Address {
    const result = super.call("PARENT", "PARENT():(address)", []);

    return result[0].toAddress();
  }

  try_PARENT(): ethereum.CallResult<Address> {
    const result = super.tryCall("PARENT", "PARENT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TYPE(): i32 {
    const result = super.call("TYPE", "TYPE():(uint8)", []);

    return result[0].toI32();
  }

  try_TYPE(): ethereum.CallResult<i32> {
    const result = super.tryCall("TYPE", "TYPE():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  VEECODE(): Bytes {
    const result = super.call("VEECODE", "VEECODE():(bytes7)", []);

    return result[0].toBytes();
  }

  try_VEECODE(): ethereum.CallResult<Bytes> {
    const result = super.tryCall("VEECODE", "VEECODE():(bytes7)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  auction(
    lotId_: BigInt,
    params_: EncryptedMarginalPriceAuctionModule__auctionInputParams_Struct,
    quoteTokenDecimals_: i32,
    baseTokenDecimals_: i32,
  ): BigInt {
    const result = super.call(
      "auction",
      "auction(uint96,(uint48,uint48,bool,uint96,bytes),uint8,uint8):(uint96)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromTuple(params_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(quoteTokenDecimals_)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseTokenDecimals_)),
      ],
    );

    return result[0].toBigInt();
  }

  try_auction(
    lotId_: BigInt,
    params_: EncryptedMarginalPriceAuctionModule__auctionInputParams_Struct,
    quoteTokenDecimals_: i32,
    baseTokenDecimals_: i32,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "auction",
      "auction(uint96,(uint48,uint48,bool,uint96,bytes),uint8,uint8):(uint96)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromTuple(params_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(quoteTokenDecimals_)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseTokenDecimals_)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionData(
    lotId: BigInt,
  ): EncryptedMarginalPriceAuctionModule__auctionDataResult {
    const result = super.call(
      "auctionData",
      "auctionData(uint96):(uint64,uint96,uint96,uint64,uint96,uint96,uint8,uint64,(uint256,uint256),uint256)",
      [ethereum.Value.fromUnsignedBigInt(lotId)],
    );

    return new EncryptedMarginalPriceAuctionModule__auctionDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toI32(),
      result[7].toBigInt(),
      changetype<EncryptedMarginalPriceAuctionModule__auctionDataResultPublicKeyStruct>(
        result[8].toTuple(),
      ),
      result[9].toBigInt(),
    );
  }

  try_auctionData(
    lotId: BigInt,
  ): ethereum.CallResult<EncryptedMarginalPriceAuctionModule__auctionDataResult> {
    const result = super.tryCall(
      "auctionData",
      "auctionData(uint96):(uint64,uint96,uint96,uint64,uint96,uint96,uint8,uint64,(uint256,uint256),uint256)",
      [ethereum.Value.fromUnsignedBigInt(lotId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new EncryptedMarginalPriceAuctionModule__auctionDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toI32(),
        value[7].toBigInt(),
        changetype<EncryptedMarginalPriceAuctionModule__auctionDataResultPublicKeyStruct>(
          value[8].toTuple(),
        ),
        value[9].toBigInt(),
      ),
    );
  }

  auctionType(): i32 {
    const result = super.call("auctionType", "auctionType():(uint8)", []);

    return result[0].toI32();
  }

  try_auctionType(): ethereum.CallResult<i32> {
    const result = super.tryCall("auctionType", "auctionType():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  bid(
    lotId_: BigInt,
    bidder_: Address,
    referrer_: Address,
    amount_: BigInt,
    auctionData_: Bytes,
  ): BigInt {
    const result = super.call(
      "bid",
      "bid(uint96,address,address,uint96,bytes):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromAddress(bidder_),
        ethereum.Value.fromAddress(referrer_),
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromBytes(auctionData_),
      ],
    );

    return result[0].toBigInt();
  }

  try_bid(
    lotId_: BigInt,
    bidder_: Address,
    referrer_: Address,
    amount_: BigInt,
    auctionData_: Bytes,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "bid",
      "bid(uint96,address,address,uint96,bytes):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromAddress(bidder_),
        ethereum.Value.fromAddress(referrer_),
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromBytes(auctionData_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bids(
    lotId: BigInt,
    bidId: BigInt,
  ): EncryptedMarginalPriceAuctionModule__bidsResult {
    const result = super.call(
      "bids",
      "bids(uint96,uint64):(address,uint96,uint96,address,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId),
        ethereum.Value.fromUnsignedBigInt(bidId),
      ],
    );

    return new EncryptedMarginalPriceAuctionModule__bidsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toI32(),
    );
  }

  try_bids(
    lotId: BigInt,
    bidId: BigInt,
  ): ethereum.CallResult<EncryptedMarginalPriceAuctionModule__bidsResult> {
    const result = super.tryCall(
      "bids",
      "bids(uint96,uint64):(address,uint96,uint96,address,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId),
        ethereum.Value.fromUnsignedBigInt(bidId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new EncryptedMarginalPriceAuctionModule__bidsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toI32(),
      ),
    );
  }

  capacityInQuote(lotId_: BigInt): boolean {
    const result = super.call(
      "capacityInQuote",
      "capacityInQuote(uint96):(bool)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return result[0].toBoolean();
  }

  try_capacityInQuote(lotId_: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "capacityInQuote",
      "capacityInQuote(uint96):(bool)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claimBids(
    lotId_: BigInt,
    bidIds_: Array<BigInt>,
  ): EncryptedMarginalPriceAuctionModule__claimBidsResult {
    const result = super.call(
      "claimBids",
      "claimBids(uint96,uint64[]):((address,address,uint96,uint96)[],bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigIntArray(bidIds_),
      ],
    );

    return new EncryptedMarginalPriceAuctionModule__claimBidsResult(
      result[0].toTupleArray<EncryptedMarginalPriceAuctionModule__claimBidsResultBidClaimsStruct>(),
      result[1].toBytes(),
    );
  }

  try_claimBids(
    lotId_: BigInt,
    bidIds_: Array<BigInt>,
  ): ethereum.CallResult<EncryptedMarginalPriceAuctionModule__claimBidsResult> {
    const result = super.tryCall(
      "claimBids",
      "claimBids(uint96,uint64[]):((address,address,uint96,uint96)[],bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigIntArray(bidIds_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new EncryptedMarginalPriceAuctionModule__claimBidsResult(
        value[0].toTupleArray<EncryptedMarginalPriceAuctionModule__claimBidsResultBidClaimsStruct>(),
        value[1].toBytes(),
      ),
    );
  }

  claimProceeds(
    lotId_: BigInt,
  ): EncryptedMarginalPriceAuctionModule__claimProceedsResult {
    const result = super.call(
      "claimProceeds",
      "claimProceeds(uint96):(uint96,uint96,uint96)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return new EncryptedMarginalPriceAuctionModule__claimProceedsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_claimProceeds(
    lotId_: BigInt,
  ): ethereum.CallResult<EncryptedMarginalPriceAuctionModule__claimProceedsResult> {
    const result = super.tryCall(
      "claimProceeds",
      "claimProceeds(uint96):(uint96,uint96,uint96)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new EncryptedMarginalPriceAuctionModule__claimProceedsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  decryptedBids(lotId: BigInt): BigInt {
    const result = super.call("decryptedBids", "decryptedBids(uint96):(uint64)", [
      ethereum.Value.fromUnsignedBigInt(lotId),
    ]);

    return result[0].toBigInt();
  }

  try_decryptedBids(lotId: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "decryptedBids",
      "decryptedBids(uint96):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(lotId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  encryptedBids(
    lotId: BigInt,
    bidId: BigInt,
  ): EncryptedMarginalPriceAuctionModule__encryptedBidsResult {
    const result = super.call(
      "encryptedBids",
      "encryptedBids(uint96,uint64):(uint256,(uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(lotId),
        ethereum.Value.fromUnsignedBigInt(bidId),
      ],
    );

    return new EncryptedMarginalPriceAuctionModule__encryptedBidsResult(
      result[0].toBigInt(),
      changetype<EncryptedMarginalPriceAuctionModule__encryptedBidsResultBidPubKeyStruct>(
        result[1].toTuple(),
      ),
    );
  }

  try_encryptedBids(
    lotId: BigInt,
    bidId: BigInt,
  ): ethereum.CallResult<EncryptedMarginalPriceAuctionModule__encryptedBidsResult> {
    const result = super.tryCall(
      "encryptedBids",
      "encryptedBids(uint96,uint64):(uint256,(uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(lotId),
        ethereum.Value.fromUnsignedBigInt(bidId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new EncryptedMarginalPriceAuctionModule__encryptedBidsResult(
        value[0].toBigInt(),
        changetype<EncryptedMarginalPriceAuctionModule__encryptedBidsResultBidPubKeyStruct>(
          value[1].toTuple(),
        ),
      ),
    );
  }

  getAuctionData(
    lotId_: BigInt,
  ): EncryptedMarginalPriceAuctionModule__getAuctionDataResultAuctionData_Struct {
    const result = super.call(
      "getAuctionData",
      "getAuctionData(uint96):((uint64,uint96,uint96,uint64,uint96,uint96,uint8,uint64,(uint256,uint256),uint256,uint64[]))",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return changetype<EncryptedMarginalPriceAuctionModule__getAuctionDataResultAuctionData_Struct>(
      result[0].toTuple(),
    );
  }

  try_getAuctionData(
    lotId_: BigInt,
  ): ethereum.CallResult<EncryptedMarginalPriceAuctionModule__getAuctionDataResultAuctionData_Struct> {
    const result = super.tryCall(
      "getAuctionData",
      "getAuctionData(uint96):((uint64,uint96,uint96,uint64,uint96,uint96,uint8,uint64,(uint256,uint256),uint256,uint64[]))",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<EncryptedMarginalPriceAuctionModule__getAuctionDataResultAuctionData_Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getBid(
    lotId_: BigInt,
    bidId_: BigInt,
  ): EncryptedMarginalPriceAuctionModule__getBidResult {
    const result = super.call(
      "getBid",
      "getBid(uint96,uint64):((address,uint96,uint96,address,uint8),(uint256,(uint256,uint256)))",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(bidId_),
      ],
    );

    return changetype<EncryptedMarginalPriceAuctionModule__getBidResult>(
      new EncryptedMarginalPriceAuctionModule__getBidResult(
        changetype<EncryptedMarginalPriceAuctionModule__getBidResultBidStruct>(
          result[0].toTuple(),
        ),
        changetype<EncryptedMarginalPriceAuctionModule__getBidResultEncryptedBidStruct>(
          result[1].toTuple(),
        ),
      ),
    );
  }

  try_getBid(
    lotId_: BigInt,
    bidId_: BigInt,
  ): ethereum.CallResult<EncryptedMarginalPriceAuctionModule__getBidResult> {
    const result = super.tryCall(
      "getBid",
      "getBid(uint96,uint64):((address,uint96,uint96,address,uint8),(uint256,(uint256,uint256)))",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(bidId_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<EncryptedMarginalPriceAuctionModule__getBidResult>(
        new EncryptedMarginalPriceAuctionModule__getBidResult(
          changetype<EncryptedMarginalPriceAuctionModule__getBidResultBidStruct>(
            value[0].toTuple(),
          ),
          changetype<EncryptedMarginalPriceAuctionModule__getBidResultEncryptedBidStruct>(
            value[1].toTuple(),
          ),
        ),
      ),
    );
  }

  getLot(
    lotId_: BigInt,
  ): EncryptedMarginalPriceAuctionModule__getLotResultValue0Struct {
    const result = super.call(
      "getLot",
      "getLot(uint96):((uint48,uint48,uint8,uint8,bool,uint96,uint96,uint96,uint96))",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return changetype<EncryptedMarginalPriceAuctionModule__getLotResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getLot(
    lotId_: BigInt,
  ): ethereum.CallResult<EncryptedMarginalPriceAuctionModule__getLotResultValue0Struct> {
    const result = super.tryCall(
      "getLot",
      "getLot(uint96):((uint48,uint48,uint8,uint8,bool,uint96,uint96,uint96,uint96))",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<EncryptedMarginalPriceAuctionModule__getLotResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  hasEnded(lotId_: BigInt): boolean {
    const result = super.call("hasEnded", "hasEnded(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);

    return result[0].toBoolean();
  }

  try_hasEnded(lotId_: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall("hasEnded", "hasEnded(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLive(lotId_: BigInt): boolean {
    const result = super.call("isLive", "isLive(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);

    return result[0].toBoolean();
  }

  try_isLive(lotId_: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall("isLive", "isLive(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lotData(id: BigInt): EncryptedMarginalPriceAuctionModule__lotDataResult {
    const result = super.call(
      "lotData",
      "lotData(uint96):(uint48,uint48,uint8,uint8,bool,uint96,uint96,uint96,uint96)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return new EncryptedMarginalPriceAuctionModule__lotDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
    );
  }

  try_lotData(
    id: BigInt,
  ): ethereum.CallResult<EncryptedMarginalPriceAuctionModule__lotDataResult> {
    const result = super.tryCall(
      "lotData",
      "lotData(uint96):(uint48,uint48,uint8,uint8,bool,uint96,uint96,uint96,uint96)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new EncryptedMarginalPriceAuctionModule__lotDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
      ),
    );
  }

  maxAmountAccepted(lotId_: BigInt): BigInt {
    const result = super.call(
      "maxAmountAccepted",
      "maxAmountAccepted(uint96):(uint96)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return result[0].toBigInt();
  }

  try_maxAmountAccepted(lotId_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "maxAmountAccepted",
      "maxAmountAccepted(uint96):(uint96)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxPayout(lotId_: BigInt): BigInt {
    const result = super.call("maxPayout", "maxPayout(uint96):(uint96)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);

    return result[0].toBigInt();
  }

  try_maxPayout(lotId_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall("maxPayout", "maxPayout(uint96):(uint96)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minAuctionDuration(): BigInt {
    const result = super.call(
      "minAuctionDuration",
      "minAuctionDuration():(uint48)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minAuctionDuration(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "minAuctionDuration",
      "minAuctionDuration():(uint48)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  payoutFor(lotId_: BigInt, amount_: BigInt): BigInt {
    const result = super.call("payoutFor", "payoutFor(uint96,uint96):(uint96)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
      ethereum.Value.fromUnsignedBigInt(amount_),
    ]);

    return result[0].toBigInt();
  }

  try_payoutFor(lotId_: BigInt, amount_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "payoutFor",
      "payoutFor(uint96,uint96):(uint96)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(amount_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceFor(lotId_: BigInt, payout_: BigInt): BigInt {
    const result = super.call("priceFor", "priceFor(uint96,uint96):(uint96)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
      ethereum.Value.fromUnsignedBigInt(payout_),
    ]);

    return result[0].toBigInt();
  }

  try_priceFor(lotId_: BigInt, payout_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall("priceFor", "priceFor(uint96,uint96):(uint96)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
      ethereum.Value.fromUnsignedBigInt(payout_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  purchase(
    lotId_: BigInt,
    amount_: BigInt,
    auctionData_: Bytes,
  ): EncryptedMarginalPriceAuctionModule__purchaseResult {
    const result = super.call(
      "purchase",
      "purchase(uint96,uint96,bytes):(uint96,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromBytes(auctionData_),
      ],
    );

    return new EncryptedMarginalPriceAuctionModule__purchaseResult(
      result[0].toBigInt(),
      result[1].toBytes(),
    );
  }

  try_purchase(
    lotId_: BigInt,
    amount_: BigInt,
    auctionData_: Bytes,
  ): ethereum.CallResult<EncryptedMarginalPriceAuctionModule__purchaseResult> {
    const result = super.tryCall(
      "purchase",
      "purchase(uint96,uint96,bytes):(uint96,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromBytes(auctionData_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new EncryptedMarginalPriceAuctionModule__purchaseResult(
        value[0].toBigInt(),
        value[1].toBytes(),
      ),
    );
  }

  refundBid(lotId_: BigInt, bidId_: BigInt, caller_: Address): BigInt {
    const result = super.call(
      "refundBid",
      "refundBid(uint96,uint64,address):(uint96)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(bidId_),
        ethereum.Value.fromAddress(caller_),
      ],
    );

    return result[0].toBigInt();
  }

  try_refundBid(
    lotId_: BigInt,
    bidId_: BigInt,
    caller_: Address,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "refundBid",
      "refundBid(uint96,uint64,address):(uint96)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(bidId_),
        ethereum.Value.fromAddress(caller_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  remainingCapacity(lotId_: BigInt): BigInt {
    const result = super.call(
      "remainingCapacity",
      "remainingCapacity(uint96):(uint96)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return result[0].toBigInt();
  }

  try_remainingCapacity(lotId_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "remainingCapacity",
      "remainingCapacity(uint96):(uint96)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settle(lotId_: BigInt): EncryptedMarginalPriceAuctionModule__settleResult {
    const result = super.call(
      "settle",
      "settle(uint96):((uint96,uint96,address,address,uint96,uint96,bytes),bytes)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return changetype<EncryptedMarginalPriceAuctionModule__settleResult>(
      new EncryptedMarginalPriceAuctionModule__settleResult(
        changetype<EncryptedMarginalPriceAuctionModule__settleResultSettlementStruct>(
          result[0].toTuple(),
        ),
        result[1].toBytes(),
      ),
    );
  }

  try_settle(
    lotId_: BigInt,
  ): ethereum.CallResult<EncryptedMarginalPriceAuctionModule__settleResult> {
    const result = super.tryCall(
      "settle",
      "settle(uint96):((uint96,uint96,address,address,uint96,uint96,bytes),bytes)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<EncryptedMarginalPriceAuctionModule__settleResult>(
        new EncryptedMarginalPriceAuctionModule__settleResult(
          changetype<EncryptedMarginalPriceAuctionModule__settleResultSettlementStruct>(
            value[0].toTuple(),
          ),
          value[1].toBytes(),
        ),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get auctionHouse_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class INITCall extends ethereum.Call {
  get inputs(): INITCall__Inputs {
    return new INITCall__Inputs(this);
  }

  get outputs(): INITCall__Outputs {
    return new INITCall__Outputs(this);
  }
}

export class INITCall__Inputs {
  _call: INITCall;

  constructor(call: INITCall) {
    this._call = call;
  }
}

export class INITCall__Outputs {
  _call: INITCall;

  constructor(call: INITCall) {
    this._call = call;
  }
}

export class AuctionCall extends ethereum.Call {
  get inputs(): AuctionCall__Inputs {
    return new AuctionCall__Inputs(this);
  }

  get outputs(): AuctionCall__Outputs {
    return new AuctionCall__Outputs(this);
  }
}

export class AuctionCall__Inputs {
  _call: AuctionCall;

  constructor(call: AuctionCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get params_(): AuctionCallParams_Struct {
    return changetype<AuctionCallParams_Struct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get quoteTokenDecimals_(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get baseTokenDecimals_(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class AuctionCall__Outputs {
  _call: AuctionCall;

  constructor(call: AuctionCall) {
    this._call = call;
  }

  get capacity(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AuctionCallParams_Struct extends ethereum.Tuple {
  get start(): BigInt {
    return this[0].toBigInt();
  }

  get duration(): BigInt {
    return this[1].toBigInt();
  }

  get capacityInQuote(): boolean {
    return this[2].toBoolean();
  }

  get capacity(): BigInt {
    return this[3].toBigInt();
  }

  get implParams(): Bytes {
    return this[4].toBytes();
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidder_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get referrer_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get auctionData_(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get bidId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CancelAuctionCall extends ethereum.Call {
  get inputs(): CancelAuctionCall__Inputs {
    return new CancelAuctionCall__Inputs(this);
  }

  get outputs(): CancelAuctionCall__Outputs {
    return new CancelAuctionCall__Outputs(this);
  }
}

export class CancelAuctionCall__Inputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelAuctionCall__Outputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }
}

export class ClaimBidsCall extends ethereum.Call {
  get inputs(): ClaimBidsCall__Inputs {
    return new ClaimBidsCall__Inputs(this);
  }

  get outputs(): ClaimBidsCall__Outputs {
    return new ClaimBidsCall__Outputs(this);
  }
}

export class ClaimBidsCall__Inputs {
  _call: ClaimBidsCall;

  constructor(call: ClaimBidsCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidIds_(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ClaimBidsCall__Outputs {
  _call: ClaimBidsCall;

  constructor(call: ClaimBidsCall) {
    this._call = call;
  }

  get bidClaims(): Array<ClaimBidsCallBidClaimsStruct> {
    return this._call.outputValues[0].value.toTupleArray<ClaimBidsCallBidClaimsStruct>();
  }

  get auctionOutput(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class ClaimBidsCallBidClaimsStruct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get referrer(): Address {
    return this[1].toAddress();
  }

  get paid(): BigInt {
    return this[2].toBigInt();
  }

  get payout(): BigInt {
    return this[3].toBigInt();
  }
}

export class ClaimProceedsCall extends ethereum.Call {
  get inputs(): ClaimProceedsCall__Inputs {
    return new ClaimProceedsCall__Inputs(this);
  }

  get outputs(): ClaimProceedsCall__Outputs {
    return new ClaimProceedsCall__Outputs(this);
  }
}

export class ClaimProceedsCall__Inputs {
  _call: ClaimProceedsCall;

  constructor(call: ClaimProceedsCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimProceedsCall__Outputs {
  _call: ClaimProceedsCall;

  constructor(call: ClaimProceedsCall) {
    this._call = call;
  }

  get purchased(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get sold(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get payoutSent(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class DecryptAndSortBidsCall extends ethereum.Call {
  get inputs(): DecryptAndSortBidsCall__Inputs {
    return new DecryptAndSortBidsCall__Inputs(this);
  }

  get outputs(): DecryptAndSortBidsCall__Outputs {
    return new DecryptAndSortBidsCall__Outputs(this);
  }
}

export class DecryptAndSortBidsCall__Inputs {
  _call: DecryptAndSortBidsCall;

  constructor(call: DecryptAndSortBidsCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get num_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecryptAndSortBidsCall__Outputs {
  _call: DecryptAndSortBidsCall;

  constructor(call: DecryptAndSortBidsCall) {
    this._call = call;
  }
}

export class PurchaseCall extends ethereum.Call {
  get inputs(): PurchaseCall__Inputs {
    return new PurchaseCall__Inputs(this);
  }

  get outputs(): PurchaseCall__Outputs {
    return new PurchaseCall__Outputs(this);
  }
}

export class PurchaseCall__Inputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get auctionData_(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class PurchaseCall__Outputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get payout(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get auctionOutput(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class RefundBidCall extends ethereum.Call {
  get inputs(): RefundBidCall__Inputs {
    return new RefundBidCall__Inputs(this);
  }

  get outputs(): RefundBidCall__Outputs {
    return new RefundBidCall__Outputs(this);
  }
}

export class RefundBidCall__Inputs {
  _call: RefundBidCall;

  constructor(call: RefundBidCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get caller_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RefundBidCall__Outputs {
  _call: RefundBidCall;

  constructor(call: RefundBidCall) {
    this._call = call;
  }

  get refund(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get settlement(): SettleCallSettlementStruct {
    return changetype<SettleCallSettlementStruct>(
      this._call.outputValues[0].value.toTuple(),
    );
  }

  get auctionOutput(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class SettleCallSettlementStruct extends ethereum.Tuple {
  get totalIn(): BigInt {
    return this[0].toBigInt();
  }

  get totalOut(): BigInt {
    return this[1].toBigInt();
  }

  get pfBidder(): Address {
    return this[2].toAddress();
  }

  get pfReferrer(): Address {
    return this[3].toAddress();
  }

  get pfRefund(): BigInt {
    return this[4].toBigInt();
  }

  get pfPayout(): BigInt {
    return this[5].toBigInt();
  }

  get auctionOutput(): Bytes {
    return this[6].toBytes();
  }
}

export class SubmitPrivateKeyCall extends ethereum.Call {
  get inputs(): SubmitPrivateKeyCall__Inputs {
    return new SubmitPrivateKeyCall__Inputs(this);
  }

  get outputs(): SubmitPrivateKeyCall__Outputs {
    return new SubmitPrivateKeyCall__Outputs(this);
  }
}

export class SubmitPrivateKeyCall__Inputs {
  _call: SubmitPrivateKeyCall;

  constructor(call: SubmitPrivateKeyCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get privateKey_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get num_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SubmitPrivateKeyCall__Outputs {
  _call: SubmitPrivateKeyCall;

  constructor(call: SubmitPrivateKeyCall) {
    this._call = call;
  }
}
