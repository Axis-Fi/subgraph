// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap,
} from "@graphprotocol/graph-ts";

export class AtomicAuctionModule__getLotResultValue0Struct extends ethereum.Tuple {
  get start(): BigInt {
    return this[0].toBigInt();
  }

  get conclusion(): BigInt {
    return this[1].toBigInt();
  }

  get quoteTokenDecimals(): i32 {
    return this[2].toI32();
  }

  get baseTokenDecimals(): i32 {
    return this[3].toI32();
  }

  get capacityInQuote(): boolean {
    return this[4].toBoolean();
  }

  get capacity(): BigInt {
    return this[5].toBigInt();
  }

  get sold(): BigInt {
    return this[6].toBigInt();
  }

  get purchased(): BigInt {
    return this[7].toBigInt();
  }
}

export class AtomicAuctionModule__lotDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: i32;
  value4: boolean;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: i32,
    value3: i32,
    value4: boolean,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3)),
    );
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getStart(): BigInt {
    return this.value0;
  }

  getConclusion(): BigInt {
    return this.value1;
  }

  getQuoteTokenDecimals(): i32 {
    return this.value2;
  }

  getBaseTokenDecimals(): i32 {
    return this.value3;
  }

  getCapacityInQuote(): boolean {
    return this.value4;
  }

  getCapacity(): BigInt {
    return this.value5;
  }

  getSold(): BigInt {
    return this.value6;
  }

  getPurchased(): BigInt {
    return this.value7;
  }
}

export class AtomicAuctionModule__purchaseResult {
  value0: BigInt;
  value1: Bytes;

  constructor(value0: BigInt, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getPayout(): BigInt {
    return this.value0;
  }

  getAuctionOutput(): Bytes {
    return this.value1;
  }
}

export class AtomicAuctionModule extends ethereum.SmartContract {
  static bind(address: Address): AtomicAuctionModule {
    return new AtomicAuctionModule("AtomicAuctionModule", address);
  }

  PARENT(): Address {
    const result = super.call("PARENT", "PARENT():(address)", []);

    return result[0].toAddress();
  }

  try_PARENT(): ethereum.CallResult<Address> {
    const result = super.tryCall("PARENT", "PARENT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TYPE(): i32 {
    const result = super.call("TYPE", "TYPE():(uint8)", []);

    return result[0].toI32();
  }

  try_TYPE(): ethereum.CallResult<i32> {
    const result = super.tryCall("TYPE", "TYPE():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  VEECODE(): Bytes {
    const result = super.call("VEECODE", "VEECODE():(bytes7)", []);

    return result[0].toBytes();
  }

  try_VEECODE(): ethereum.CallResult<Bytes> {
    const result = super.tryCall("VEECODE", "VEECODE():(bytes7)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  auctionType(): i32 {
    const result = super.call("auctionType", "auctionType():(uint8)", []);

    return result[0].toI32();
  }

  try_auctionType(): ethereum.CallResult<i32> {
    const result = super.tryCall("auctionType", "auctionType():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  capacityInQuote(lotId_: BigInt): boolean {
    const result = super.call(
      "capacityInQuote",
      "capacityInQuote(uint96):(bool)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return result[0].toBoolean();
  }

  try_capacityInQuote(lotId_: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "capacityInQuote",
      "capacityInQuote(uint96):(bool)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getLot(lotId_: BigInt): AtomicAuctionModule__getLotResultValue0Struct {
    const result = super.call(
      "getLot",
      "getLot(uint96):((uint48,uint48,uint8,uint8,bool,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return changetype<AtomicAuctionModule__getLotResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getLot(
    lotId_: BigInt,
  ): ethereum.CallResult<AtomicAuctionModule__getLotResultValue0Struct> {
    const result = super.tryCall(
      "getLot",
      "getLot(uint96):((uint48,uint48,uint8,uint8,bool,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AtomicAuctionModule__getLotResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  hasEnded(lotId_: BigInt): boolean {
    const result = super.call("hasEnded", "hasEnded(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);

    return result[0].toBoolean();
  }

  try_hasEnded(lotId_: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall("hasEnded", "hasEnded(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLive(lotId_: BigInt): boolean {
    const result = super.call("isLive", "isLive(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);

    return result[0].toBoolean();
  }

  try_isLive(lotId_: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall("isLive", "isLive(uint96):(bool)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lotData(id: BigInt): AtomicAuctionModule__lotDataResult {
    const result = super.call(
      "lotData",
      "lotData(uint96):(uint48,uint48,uint8,uint8,bool,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return new AtomicAuctionModule__lotDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
    );
  }

  try_lotData(
    id: BigInt,
  ): ethereum.CallResult<AtomicAuctionModule__lotDataResult> {
    const result = super.tryCall(
      "lotData",
      "lotData(uint96):(uint48,uint48,uint8,uint8,bool,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new AtomicAuctionModule__lotDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
      ),
    );
  }

  maxAmountAccepted(lotId_: BigInt): BigInt {
    const result = super.call(
      "maxAmountAccepted",
      "maxAmountAccepted(uint96):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return result[0].toBigInt();
  }

  try_maxAmountAccepted(lotId_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "maxAmountAccepted",
      "maxAmountAccepted(uint96):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxPayout(lotId_: BigInt): BigInt {
    const result = super.call("maxPayout", "maxPayout(uint96):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);

    return result[0].toBigInt();
  }

  try_maxPayout(lotId_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall("maxPayout", "maxPayout(uint96):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minAuctionDuration(): BigInt {
    const result = super.call(
      "minAuctionDuration",
      "minAuctionDuration():(uint48)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minAuctionDuration(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "minAuctionDuration",
      "minAuctionDuration():(uint48)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  payoutFor(lotId_: BigInt, amount_: BigInt): BigInt {
    const result = super.call(
      "payoutFor",
      "payoutFor(uint96,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(amount_),
      ],
    );

    return result[0].toBigInt();
  }

  try_payoutFor(lotId_: BigInt, amount_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "payoutFor",
      "payoutFor(uint96,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(amount_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceFor(lotId_: BigInt, payout_: BigInt): BigInt {
    const result = super.call("priceFor", "priceFor(uint96,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(lotId_),
      ethereum.Value.fromUnsignedBigInt(payout_),
    ]);

    return result[0].toBigInt();
  }

  try_priceFor(lotId_: BigInt, payout_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "priceFor",
      "priceFor(uint96,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(payout_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  purchase(
    lotId_: BigInt,
    amount_: BigInt,
    auctionData_: Bytes,
  ): AtomicAuctionModule__purchaseResult {
    const result = super.call(
      "purchase",
      "purchase(uint96,uint256,bytes):(uint256,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromBytes(auctionData_),
      ],
    );

    return new AtomicAuctionModule__purchaseResult(
      result[0].toBigInt(),
      result[1].toBytes(),
    );
  }

  try_purchase(
    lotId_: BigInt,
    amount_: BigInt,
    auctionData_: Bytes,
  ): ethereum.CallResult<AtomicAuctionModule__purchaseResult> {
    const result = super.tryCall(
      "purchase",
      "purchase(uint96,uint256,bytes):(uint256,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(lotId_),
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromBytes(auctionData_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new AtomicAuctionModule__purchaseResult(
        value[0].toBigInt(),
        value[1].toBytes(),
      ),
    );
  }

  remainingCapacity(lotId_: BigInt): BigInt {
    const result = super.call(
      "remainingCapacity",
      "remainingCapacity(uint96):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );

    return result[0].toBigInt();
  }

  try_remainingCapacity(lotId_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "remainingCapacity",
      "remainingCapacity(uint96):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(lotId_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class INITCall extends ethereum.Call {
  get inputs(): INITCall__Inputs {
    return new INITCall__Inputs(this);
  }

  get outputs(): INITCall__Outputs {
    return new INITCall__Outputs(this);
  }
}

export class INITCall__Inputs {
  _call: INITCall;

  constructor(call: INITCall) {
    this._call = call;
  }
}

export class INITCall__Outputs {
  _call: INITCall;

  constructor(call: INITCall) {
    this._call = call;
  }
}

export class AuctionCall extends ethereum.Call {
  get inputs(): AuctionCall__Inputs {
    return new AuctionCall__Inputs(this);
  }

  get outputs(): AuctionCall__Outputs {
    return new AuctionCall__Outputs(this);
  }
}

export class AuctionCall__Inputs {
  _call: AuctionCall;

  constructor(call: AuctionCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get params_(): AuctionCallParams_Struct {
    return changetype<AuctionCallParams_Struct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get quoteTokenDecimals_(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get baseTokenDecimals_(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class AuctionCall__Outputs {
  _call: AuctionCall;

  constructor(call: AuctionCall) {
    this._call = call;
  }
}

export class AuctionCallParams_Struct extends ethereum.Tuple {
  get start(): BigInt {
    return this[0].toBigInt();
  }

  get duration(): BigInt {
    return this[1].toBigInt();
  }

  get capacityInQuote(): boolean {
    return this[2].toBoolean();
  }

  get capacity(): BigInt {
    return this[3].toBigInt();
  }

  get implParams(): Bytes {
    return this[4].toBytes();
  }
}

export class CancelAuctionCall extends ethereum.Call {
  get inputs(): CancelAuctionCall__Inputs {
    return new CancelAuctionCall__Inputs(this);
  }

  get outputs(): CancelAuctionCall__Outputs {
    return new CancelAuctionCall__Outputs(this);
  }
}

export class CancelAuctionCall__Inputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelAuctionCall__Outputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }
}

export class PurchaseCall extends ethereum.Call {
  get inputs(): PurchaseCall__Inputs {
    return new PurchaseCall__Inputs(this);
  }

  get outputs(): PurchaseCall__Outputs {
    return new PurchaseCall__Outputs(this);
  }
}

export class PurchaseCall__Inputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get lotId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get auctionData_(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class PurchaseCall__Outputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get payout(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get auctionOutput(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class SetMinAuctionDurationCall extends ethereum.Call {
  get inputs(): SetMinAuctionDurationCall__Inputs {
    return new SetMinAuctionDurationCall__Inputs(this);
  }

  get outputs(): SetMinAuctionDurationCall__Outputs {
    return new SetMinAuctionDurationCall__Outputs(this);
  }
}

export class SetMinAuctionDurationCall__Inputs {
  _call: SetMinAuctionDurationCall;

  constructor(call: SetMinAuctionDurationCall) {
    this._call = call;
  }

  get duration_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinAuctionDurationCall__Outputs {
  _call: SetMinAuctionDurationCall;

  constructor(call: SetMinAuctionDurationCall) {
    this._call = call;
  }
}
